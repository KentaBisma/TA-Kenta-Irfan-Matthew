timestamp	text
00-08	Application Layer (6/7) Video Streaming and CDN CSCM603154 – Computer Networks Faculty of Computer Science, Universitas Indonesia All material taken from “Computer Networking: A Top-Down Approach” copyright 1996-2020, J.F Kurose and K.W. Ross, All Rights Reserved
00-23	Application layer: overview P2P applications Principles of network applications Video streaming and content distribution networks Web and HTTP Socket programming with UDP and TCP The Domain Name System
00-28	Video Streaming and CDNs: context stream video traffic: major consumer of Internet bandwidth Netflix, YouTube, Amazon Prime: 80% of residential ISP traffic (2020)
01-13	Video Streaming and CDNs: context stream video traffic: major consumer of Internet bandwidth Netflix, YouTube, Amazon Prime: 80% of residential ISP traffic (2020) challenge: scale - how to reach ~1B users?
01-41	Video Streaming and CDNs: context stream video traffic: major consumer of Internet bandwidth Netflix, YouTube, Amazon Prime: 80% of residential ISP traffic (2020) challenge: scale - how to reach ~1B users? challenge: heterogeneity different users have different capabilities (e.g., wired versus mobile; bandwidth rich versus bandwidth poor)
02-12	Video Streaming and CDNs: context stream video traffic: major consumer of Internet bandwidth Netflix, YouTube, Amazon Prime: 80% of residential ISP traffic (2020) challenge: scale - how to reach ~1B users? challenge: heterogeneity different users have different capabilities (e.g., wired versus mobile; bandwidth rich versus bandwidth poor) solution: distributed, application-level infrastructure
02-33	Video Streaming and CDNs: context stream video traffic: major consumer of Internet bandwidth Netflix, YouTube, Amazon Prime: 80% of residential ISP traffic (2020) challenge: scale - how to reach ~1B users? challenge: heterogeneity different users have different capabilities (e.g., wired versus mobile; bandwidth rich versus bandwidth poor) solution: distributed, application-level infrastructure
02-42	Multimedia: video video: sequence of images displayed at constant rate e.g., 24 images/sec
03-39	Multimedia: video video: sequence of images displayed at constant rate e.g., 24 images/sec digital image: array of pixels each pixel represented by bits
04-05	Multimedia: video video: sequence of images displayed at constant rate e.g., 24 images/sec digital image: array of pixels each pixel represented by bits coding: use redundancy within and between images to decrease # bits used to encode image
05-49	Multimedia: video video: sequence of images displayed at constant rate e.g., 24 images/sec digital image: array of pixels each pixel represented by bits coding: use redundancy within and between images to decrease # bits used to encode image spatial (within image) spatial coding example: instead of sending N values of same color (all purple), send only two values: color value (purple) and number of repeated values (N)
06-33	Multimedia: video video: sequence of images displayed at constant rate e.g., 24 images/sec digital image: array of pixels each pixel represented by bits coding: use redundancy within and between images to decrease # bits used to encode image spatial (within image) temporal (from one image to next) spatial coding example: instead of sending N values of same color (all purple), send only two values: color value (purple) and number of repeated values (N)
06-39	Multimedia: video video: sequence of images displayed at constant rate e.g., 24 images/sec digital image: array of pixels each pixel represented by bits coding: use redundancy within and between images to decrease # bits used to encode image spatial (within image) temporal (from one image to next) spatial coding example: instead of sending N values of same color (all purple), send only two values: color value (purple) and number of repeated values (N) temporal coding example: instead of sending complete frame at i+1, send only differences from frame i
07-14	Multimedia: video CBR: (constant bit rate): video encoding rate fixed spatial coding example: instead of sending N values of same color (all purple), send only two values: color value (purple) and number of repeated values (N) temporal coding example: instead of sending complete frame at i+1, send only differences from frame i
07-16	Multimedia: video video: sequence of images displayed at constant rate e.g., 24 images/sec digital image: array of pixels each pixel represented by bits coding: use redundancy within and between images to decrease # bits used to encode image spatial (within image) temporal (from one image to next) spatial coding example: instead of sending N values of same color (all purple), send only two values: color value (purple) and number of repeated values (N) temporal coding example: instead of sending complete frame at i+1, send only differences from frame i
07-29	Multimedia: video CBR: (constant bit rate): video encoding rate fixed spatial coding example: instead of sending N values of same color (all purple), send only two values: color value (purple) and number of repeated values (N) temporal coding example: instead of sending complete frame at i+1, send only differences from frame i
08-08	Multimedia: video CBR: (constant bit rate): video encoding rate fixed VBR: (variable bit rate): video encoding rate changes as amount of spatial, temporal coding changes spatial coding example: instead of sending N values of same color (all purple), send only two values: color value (purple) and number of repeated values (N) temporal coding example: instead of sending complete frame at i+1, send only differences from frame i
08-29	Multimedia: video CBR: (constant bit rate): video encoding rate fixed VBR: (variable bit rate): video encoding rate changes as amount of spatial, temporal coding changes examples: MPEG 1 (CD-ROM) 1.5 Mbps MPEG2 (DVD) 3-6 Mbps MPEG4 (often used in Internet, 64Kbps – 12 Mbps) spatial coding example: instead of sending N values of same color (all purple), send only two values: color value (purple) and number of repeated values (N) temporal coding example: instead of sending complete frame at i+1, send only differences from frame i
09-08	Streaming stored video simple scenario: Main challenges:
09-18	Streaming stored video simple scenario: Main challenges: server-to-client bandwidth will vary over time, with changing network congestion levels (in house, access network, network core, video server)
09-42	Streaming stored video simple scenario: Main challenges: server-to-client bandwidth will vary over time, with changing network congestion levels (in house, access network, network core, video server) packet loss, delay due to congestion will delay playout, or result in poor video quality
09-59	Streaming stored video
10-36	Streaming stored video
11-16	Streaming stored video streaming: at this time, client playing out early part of video, while server still sending later part of video
11-28	Streaming stored video: challenges continuous playout constraint: during client video playout, playout timing must match original timing
11-48	Streaming stored video: challenges continuous playout constraint: during client video playout, playout timing must match original timing … but network delays are variable (jitter), so will need client-side buffer to match continuous playout constraint
12-14	Streaming stored video: challenges continuous playout constraint: during client video playout, playout timing must match original timing … but network delays are variable (jitter), so will need client-side buffer to match continuous playout constraint other challenges: client interactivity: pause, fast-forward, rewind, jump through video video packets may be lost, retransmitted
12-19	Streaming stored video: playout buffering
12-39	Streaming stored video: playout buffering
12-41	Streaming stored video: playout buffering client-side buffering and playout delay: compensate for network-added delay, delay jitter
12-49	Streaming multimedia: DASH Dynamic, Adaptive Streaming over HTTP
13-16	Streaming multimedia: DASH Dynamic, Adaptive Streaming over HTTP server: divides video file into multiple chunks each chunk encoded at multiple different rates different rate encodings stored in different files
14-10	Streaming multimedia: DASH Dynamic, Adaptive Streaming over HTTP server: divides video file into multiple chunks each chunk encoded at multiple different rates different rate encodings stored in different files files replicated in various CDN nodes manifest file: provides URLs for different chunks
14-16	Streaming multimedia: DASH Dynamic, Adaptive Streaming over HTTP server: divides video file into multiple chunks each chunk encoded at multiple different rates different rate encodings stored in different files files replicated in various CDN nodes manifest file: provides URLs for different chunks client: periodically estimates server-to-client bandwidth consulting manifest, requests one chunk at a time chooses maximum coding rate sustainable given current bandwidth can choose different coding rates at different points in time (depending on available bandwidth at time), and from different servers
14-23	Streaming multimedia: DASH “intelligence” at client: client determines
14-34	Streaming multimedia: DASH “intelligence” at client: client determines when to request chunk (so that buffer starvation, or overflow does not occur) what encoding rate to request (higher quality when more bandwidth available)
14-44	Streaming multimedia: DASH “intelligence” at client: client determines when to request chunk (so that buffer starvation, or overflow does not occur) what encoding rate to request (higher quality when more bandwidth available) where to request chunk (can request from URL server that is “close” to client or has high available bandwidth)
14-49	Streaming multimedia: DASH “intelligence” at client: client determines when to request chunk (so that buffer starvation, or overflow does not occur) what encoding rate to request (higher quality when more bandwidth available) where to request chunk (can request from URL server that is “close” to client or has high available bandwidth) Streaming video = encoding + DASH + playout buffering
15-12	Content distribution networks (CDNs) challenge: how to stream content (selected from millions of videos) to hundreds of thousands of simultaneous users?
15-36	Content distribution networks (CDNs) challenge: how to stream content (selected from millions of videos) to hundreds of thousands of simultaneous users? option 1: single, large “mega-server” single point of failure point of network congestion long (and possibly congested) path to distant clients
15-53	Content distribution networks (CDNs) challenge: how to stream content (selected from millions of videos) to hundreds of thousands of simultaneous users? option 1: single, large “mega-server” single point of failure point of network congestion long (and possibly congested) path to distant clients ….quite simply: this solution doesn’t scale
15-56	Content distribution networks (CDNs) challenge: how to stream content (selected from millions of videos) to hundreds of thousands of simultaneous users? option 2: store/serve multiple copies of videos at multiple geographically distributed sites (CDN)
16-07	Content distribution networks (CDNs) challenge: how to stream content (selected from millions of videos) to hundreds of thousands of simultaneous users? option 2: store/serve multiple copies of videos at multiple geographically distributed sites (CDN) enter deep: push CDN servers deep into many access networks close to users Akamai: 240,000 servers deployed in > 120 countries (2015)
16-19	Content distribution networks (CDNs) challenge: how to stream content (selected from millions of videos) to hundreds of thousands of simultaneous users? option 2: store/serve multiple copies of videos at multiple geographically distributed sites (CDN) enter deep: push CDN servers deep into many access networks close to users Akamai: 240,000 servers deployed in > 120 countries (2015) bring home: smaller number (10’s) of larger clusters in POPs near access nets used by Limelight
16-41	Content distribution networks (CDNs) CDN: stores copies of content (e.g. MADMEN) at CDN nodes
16-54	Content distribution networks (CDNs) CDN: stores copies of content (e.g. MADMEN) at CDN nodes subscriber requests content, service provider returns manifest
17-09	Content distribution networks (CDNs) CDN: stores copies of content (e.g. MADMEN) at CDN nodes subscriber requests content, service provider returns manifest using manifest, client retrieves content at highest supportable rate may choose different rate or copy if network path congested
17-15	Content distribution networks (CDNs) OTT: “over the top”
17-36	Content distribution networks (CDNs) Internet host-host communication as a service
17-48	Content distribution networks (CDNs) Internet host-host communication as a service OTT challenges: coping with a congested Internet from the “edge” what content to place in which CDN node? from which CDN node to retrieve content? At which rate?
18-00	See you in the next video
